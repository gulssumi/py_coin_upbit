# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ub.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import pyupbit
import time
import telegram
import threading
import sys
import schedule
import os.path

from PyQt5 import QtCore, QtGui, QtWidgets

#import auto_search



#tlgm_token = '2144408915:AAEfc_AYw6jGYlGMQQ6P-LrZUQicT2w4_nc'  # 텔레그램 봇 토큰 입력
#tlgm_id = '1712121399'  # 텔레그램 챗 아이디 입력
#tlgm_token = '5063366812:AAExZXxI-8Y4Aa7m2M9bEIUHo_ELMjXiHVw'
#tlgm_id = '-1001179566550'
#bot = telegram.Bot(token=tlgm_token)  # 봇 채팅방 접속

# 티커 조회
#tickers = pyupbit.get_tickers()
#print(tickers)

# 티커 조회 : KRW(원화)
#tickers_krw = pyupbit.get_tickers(fiat="KRW")
#print(tickers_krw)

# 티커 갯수 : KRW(원화)
#len_tickers = len(tickers_krw)

print('========== 종목검색 시작 ==========')
#bot.sendMessage(chat_id=tlgm_id, text='========== 종목검색 시작 ==========')  # 프로그램 시작을 알리는 메세지 보내보기

cnt: int = 0
set_ma_day: int = 5
set_ma_week: int = 10
set_interval = 1


#print(
#    f"이평선 설정값(일간) : {set_ma_day}\n"
#    f"이평선 설정값(주간) : {set_ma_week}\n"
#)

telel_message = (
    f"이평선 설정값(일간) : {set_ma_day}\n"
    f"이평선 설정값(주간) : {set_ma_week}\n"
)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(453, 529)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(170, 20, 101, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(290, 120, 71, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(290, 190, 71, 41))
        self.pushButton_2.setObjectName("pushButton_2")

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(130, 130, 48, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(130, 170, 48, 16))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(110, 190, 51, 51))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(110, 100, 48, 16))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setObjectName(u"label_6")
        self.label_6.setGeometry(QtCore.QRect(50, 370, 101, 16))
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setObjectName(u"label_7")
        self.label_7.setGeometry(QtCore.QRect(50, 420, 111, 16))

        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(40, 250, 381, 111))
        self.textBrowser.setObjectName("textBrowser")

        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(170, 120, 61, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(170, 160, 61, 31))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(170, 200, 61, 31))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setObjectName(u"lineEdit_4")
        self.lineEdit_4.setGeometry(QtCore.QRect(40, 390, 381, 21))
        self.lineEdit_5 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_5.setObjectName(u"lineEdit_5")
        self.lineEdit_5.setGeometry(QtCore.QRect(40, 440, 261, 21))
        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setObjectName(u"checkBox")
        self.checkBox.setGeometry(QtCore.QRect(310, 440, 131, 20))
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 453, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.pushButton.clicked.connect(MainWindow.start) # type: ignore
        self.pushButton_2.clicked.connect(MainWindow.stop) # type: ignore
        global tf

        if os.path.isfile("tlgm_info.txt"):            
            tf = open("tlgm_info.txt",'r')
            a, b = tf.readline().split(sep=',')
            self.lineEdit_4.setText(a)
            self.lineEdit_5.setText(b)
            tf.close()
            self.checkBox.setCheckState(2) 

        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def start(self, MainWindow):
        #self.textBrowser.append("1")   #테스트 출력용
        #self.textBrowser.append(exec(open("auto_search.py","rt","UTF-8").read()))
        #open("auto.search.py","rt","UTF-8").read()
        set_ma_day = self.lineEdit.text()
        set_ma_week = self.lineEdit_2.text()
        set_interval = int(self.lineEdit_3.text())



        global tlgm_token
        global tlgm_id
        tlgm_token = self.lineEdit_4.text()
        tlgm_id = self.lineEdit_5.text()

        if tlgm_token == '' and tlgm_id == '' :
            print("텔레그램 정보를 입력해 주세요")
            exit()
        else :
            if self.checkBox.isChecked() :
                tf = open("tlgm_info.txt",'w')
                tf.write(tlgm_token+","+tlgm_id)
                tf.close()

        global bot 
        bot = telegram.Bot(token=tlgm_token)  # 봇 채팅방 접속
        global tickers
        tickers = pyupbit.get_tickers()

        global tickers_krw 
        tickers_krw = pyupbit.get_tickers(fiat="KRW")
        
        global len_tickers 
        len_tickers = len(tickers_krw)
        print(
            f"이평선 설정값(일간) : {set_ma_day}\n"
            f"이평선 설정값(주간) : {set_ma_week}\n"
        )
        print("실행완료")
        self.textBrowser.append("실행완료")
        search_start()        
        schedule.every(set_interval).minutes.do(search_start) #해당 시간마다 실행
        #schedule.every(set_interval).seconds.do(search_start) #해당 시간마다 실행

        while True:
            schedule.run_pending()
            time.sleep(1)
        #threading.Timer(60,search_start).start()
        
    def stop(self, MainWindow):
        #exit()
        print("실행종료")
        self.textBrowser.append("실행종료")
        #search_start(2)
        sys.exit()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "종목검색(업비트)"))
        self.label_5.setText(_translate("MainWindow", "환경설정"))
        self.pushButton.setText(_translate("MainWindow", "시작"))
        self.pushButton_2.setText(_translate("MainWindow", "종료"))
        self.label_3.setText(_translate("MainWindow", "주봉"))
        self.label_2.setText(_translate("MainWindow", "일봉"))
        self.label_4.setText(_translate("MainWindow", "알림주기\n"
"(분단위)"))
        self.lineEdit.setText(_translate("MainWindow", "5")) #일봉
        self.lineEdit_2.setText(_translate("MainWindow", "10")) #주봉
        self.lineEdit_3.setText(_translate("MainWindow", "1")) #발송주기
        self.label_6.setText(_translate("MainWindow", "텔레그램 봇 토큰"))
        self.label_7.setText(_translate("MainWindow", "텔레그램 챗 아이디"))
        self.lineEdit_4.setText("")
        self.lineEdit_5.setText("")
        self.checkBox.setText(_translate("MainWindow", "텔레그램 정보 저장"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

def getdatafunc(ticker, interval):
    data = pyupbit.get_ohlcv(ticker, interval)

    if data is None:
        print(ticker, "재시도")
        time.sleep(0.2)
        data = getdatafunc(ticker, interval)

    return data
def getdatafuncWeek(ticker, interval):
    #data = pyupbit.get_ohlcv(ticker, interval)
    data = pyupbit.get_ohlcv(ticker, interval = 'week')

    if data is None:
        print(ticker, "재시도")
        time.sleep(0.2)
        data = getdatafuncWeek(ticker, interval)

    return data
def search_start():
    #return #실행결과 확인용


    for index , i in enumerate(tickers_krw):
        cnt_tickers: int = 0
        # 일봉 이평값 구하기
        #print("test")
        #print(
        #    f"이평선 설정값(일간) : {set_ma_day}\n"
        #    f"이평선 설정값(주간) : {set_ma_week}\n"
        #    f"발솔 설정값 : {set_interval}\n"
        #)
        current_price = pyupbit.get_current_price(i)
        #df_day = pyupbit.get_ohlcv(i)
        #df_day = ohlcv(i,1,1)
        df_day = getdatafunc(i,0.2)
        try :
            ma_day = df_day['close'].rolling(window=set_ma_day).mean()
        except : 
            #err_prt()
            print("일봉 이평값 값 조회 불가!!")            
            continue

        try : 
            current_ma_day = ma_day[-1]  # 당일 일간 이평선 값 
        except : 
            print("당일 일간 이평값 값 조회 불가!!")            
            continue
        try : 
            last_ma_day = ma_day[-2]  # 전일 일간 이평선 값 
        except :
            print("전일 일간 이평값 값 조회 불가!!")            
            continue

        #df_week = pyupbit.get_ohlcv(i, interval = 'week')
        df_week = getdatafuncWeek(i,0.2)
        #df_week = getdatafunc(i,0.2)
        try : 
            ma_week = df_week['close'].rolling(window=set_ma_week).mean()
        except : 
            print("당일 주간 이평선 값 조회 불가!!")            
            continue
        try :             
            current_ma_week = ma_week[-1]  # 당일 주간 이평선 값
        except :
            print("당일 주간 이평선 값 조회 불가!!")            
            continue
        try :            
            last_ma_week = ma_week[-2]  # 전일 주간 이평선 값
        except :
            print("전일 주간 이평선 값 조회 불가!!")            
            continue
    #  print(i)
        #print (current_price , current_ma_week)
        if current_price > current_ma_week:                  # 현재 가격 > 현재 주간 이평선
            if current_price > current_ma_day:         # 현재 가격 > 현재 일간 이평선
                print(
                    f"종목명 : {i}\n"
                    f"현재가 : {current_price}\n"
                    f"당일 일간 이평선 값 : {current_ma_day}\n"
                    #f"전일 일간 이평선 값 : {last_ma_day}\n"
                    f"당일 주간 이평선 값 : {current_ma_week}\n"
                    #f"전일 주간 이평선 값 : {last_ma_week}"
                )
                telel_message = (
                    f"종목명 : {i}\n"
                    f"현재가 : {current_price}\n"
                    f"당일 일간 이평선 값 : {current_ma_day}\n"
                    #f"전일 일간 이평선 값 : {last_ma_day}\n"
                    f"당일 주간 이평선 값 : {current_ma_week}\n"
                    #f"전일 주간 이평선 값 : {last_ma_week}"
                )

                ticker = i
                bot.sendMessage(chat_id=tlgm_id, text=telel_message)  # 조건 만족 종목 텔레그램 전송
                cnt_tickers += 1
        else :
            print('========== 종목검색 중(총 종목수 : ', len_tickers, '/ 검색 종목수 : ', cnt_tickers, '/ 현재순서 : ', index, '/ 검색종목 : ',i, ' ) ==========')
            #pass
    '''
        print(
    #        '종목명 : ', i, '/ 현재가 : ', current_price, '당일 5일 이평선 값 : ', current_ma_day, '/ 전일 5일 이평선 값 : ', last_ma_day
            f"종목명 : {i}\n"
            f"현재가 : {current_price}\n"
            f"이평선 설정값 : {set_ma}\n"
            f"당일 일간 이평선 값 : {current_ma_day}\n"
    #        f"전일 일간 이평선 값 : {last_ma_day}\n"
            f"당일 주간 이평선 값 : {current_ma_week}\n"
    #        f"전일 주간 이평선 값 : {last_ma_week}"
        )
    '''

    #cnt += 1
    #time.sleep(set_interval)
    #time.sleep(set_interval*60)
    #time.sleep(1)
    #threading.Timer(set_interval*60,search_start).start()
    

    print('========== 종목검색 종료(총 종목수 : ', len_tickers, '/ 검색 종목수 : ', cnt_tickers, ') ==========')            
    #bot.sendMessage(chat_id=tlgm_id, text='========== 종목검색 종료 ==========')
    #search_start()

def err_prt():
    print("업비트에서 값을 제대로 받지 못함")
    return

